@model TMS.Models.UsersTable


@if (Session["urserrole"].Equals(5))
{
    if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
    {

        if (ViewBag.message != null)
        {
            <div class="card text-center  mt-100">
                <div class="card-header bg-success text-white">Notification</div>
                <div class="card-body">
                    <h5 class="card-title ">EMAIL CONFIRMATION</h5>
                    <p class="card-text">  @ViewBag.message</p>

                    @Html.ActionLink("Login", "Login", "Users")
                </div>
                <div class="card-footer text-muted"> <a href="#" class="btn btn-outline-primary text-black">@ViewData["nowDt"]</a></div>
            </div>

        }
    }
    else
    {
        using (Html.BeginForm("Register", "SuperAdmin", FormMethod.Post))
        {
            @Html.AntiForgeryToken()
            <!-- Section: Design Block -->

            if (ViewBag.message != null)
            {
                <div class="card text-center  mt-100">
                    <div class="card-header bg-danger text-white">Notification</div>
                    <div class="card-body">
                        <h5 class="card-title ">ERROR!!!</h5>
                        <p class="card-text">  @ViewBag.message</p>
                        @Html.ValidationMessage("EmailExists", new { @class = "text-danger" })

                        @Html.ValidationMessage("usernameexixts", new { @class = "text-danger" })
                    </div>
                    <div class="card-footer text-muted "> <a href="#" class="btn btn-outline-primary text-black">@ViewData["nowDt"]</a></div>
                </div> }

<div class="row">
    <div class="col-md-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="form-horizontal">
                    <h2>USER CREATION</h2>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.ValidationMessage("passwordmissmatch", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create User" class="btn btn-outline-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="ml-xl-4 mt-3">
                    <p class="card-title"></p>
                    <img src="~/App_Start/images/activities/roles.jpg" class="img-fluid" style="width:100%" />

                </div>
            </div>
        </div>
    </div>
</div>
           
         



        }
    }

}
else
{
    <div class="card text-center  mt-100">
        <div class="card-header bg-danger text-white">Notification</div>
        <div class="card-body">
            <h5 class="card-title">NOT AUTHORISED</h5>
            <p class="card-text">  access denied</p>


        </div>
        <div class="card-footer text-muted"> <a href="@Url.Action("Index", "Home")" class="btn btn-outline-primary text-black"> <i class="fa-solid fa-house-circle-check"></i></a></div>
    </div>

}
