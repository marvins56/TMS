@model TMS.Models.TaskTable


@{

    //error handling

    if (TempData["savingerror"] != null)
    {
    <div class="card text-center  mt-100">
        <div class="card-header bg-danger text-white">Notification</div>
        <div class="card-body">
            <h5 class="card-title "> ERROR WHILE SAVING</h5>
            <p class="card-text">  @TempData["savingerror"]</p>

        </div>

        @if (Session["urserrole"].Equals(2))
        {
            <a href="@Url.Action("unittasks","Tasks")" class="btn btn-outline-primary text-black"> BACK </a>
        }
        else if (Session["urserrole"].Equals(5))
        {
             <a href="@Url.Action("Index","Tasks")" class="btn btn-outline-primary text-black"> BACK </a>
        }
        else 
        {
             <a href="@Url.Action("Mytask","Tasks")" class="btn btn-outline-primary text-black"> BACK </a>
        }

    </div>

    }
    else
    {



        <div class="jumbotron text-center">
            <h1 class="display-4"> EDIT A TASK</h1>
            <p class="lead ">edit user task task </p>
        </div>
        if (Session["urserrole"].Equals(2))
        {//ADMINISTRATORS
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-md-6 grid-margin stretch-card">
                        <div class="card">
                            <div class="card-body">
                                <div class="form-horizontal">
                                 
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.TaskId)

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FeedBack, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.FeedBack, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.FeedBack, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.BodyContent, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.BodyContent, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.BodyContent, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TaskStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <div class="checkbox">
                                                @if (Model.TaskStatus == true)
                                                {
                                                    <p class=" btn btn-outline-success text-black">@Html.EditorFor(model => model.TaskStatus) Completed</p>
                                                }
                                                else
                                                {
                                                    <p class="btn btn-outline-warning text-black">@Html.EditorFor(model => model.TaskStatus) Pending </p>
                                                }
                                                @Html.ValidationMessageFor(model => model.TaskStatus, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TastStartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.TastStartTime, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TastStartTime, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TaskEndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.TaskEndTime, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TaskEndTime, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.UnitId, "UnitId", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("UnitId", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Save" class="btn btn-primary" />

                                            <a class="btn btn-outline-primary" href=" @Url.Action("Index", "Tasks")"> View Changes</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 grid-margin stretch-card">
                        <div class="card">
                            <div class="card-body">
                                <div class="ml-xl-4 mt-3">
                                    <p class="card-title"></p>
                                    <img src="~/App_Start/images/activities/todo.jpg" class="img-fluid" style="width:100%" />

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            }
        }


        else
        {//OTHER USERS
            using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                <div class="row">
                    <div class="col-md-6 grid-margin stretch-card">
                        <div class="card">
                            <div class="card-body">
                                <div class="form-horizontal">
                                    <hr />
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.HiddenFor(model => model.TaskId)

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                                            @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TaskName, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.TaskName, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TaskName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FeedBack, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.FeedBack, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.FeedBack, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.BodyContent, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.BodyContent, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.BodyContent, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TaskStatus, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            <div class="checkbox">
                                                @if (Model.TaskStatus == true)
                                                {
                                                    <p class=" btn btn-outline-success text-black">@Html.EditorFor(model => model.TaskStatus) Completed</p>
                                                }
                                                else
                                                {
                                                    <p class="btn btn-outline-warning text-black">@Html.EditorFor(model => model.TaskStatus) Pending </p>
                                                }
                                                @Html.ValidationMessageFor(model => model.TaskStatus, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TastStartTime, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.TastStartTime, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TastStartTime, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TaskEndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.EditorFor(model => model.TaskEndTime, new { htmlAttributes = new { @class = "form-control" } })
                                            @Html.ValidationMessageFor(model => model.TaskEndTime, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.UnitId, "UnitId", htmlAttributes: new { @class = "control-label col-md-2" })
                                        <div class="col-md-10">
                                            @Html.DropDownList("UnitId", null, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                                            @Html.ValidationMessageFor(model => model.UnitId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-md-offset-2 col-md-10">
                                            <input type="submit" value="Save" class="btn btn-primary" />


                                            <a class="btn btn-outline-primary" href=" @Url.Action("Mytask", "Tasks")"> View Changes</a>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 grid-margin stretch-card">
                        <div class="card">
                            <div class="card-body">
                                <div class="ml-xl-4 mt-3">
                                    <p class="card-title"></p>
                                    <img src="~/App_Start/images/activities/todo.jpg" class="img-fluid" style="width:100%" />

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            }

        }



    }

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}





