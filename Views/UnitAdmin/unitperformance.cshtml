
@if (Session["urserrole"].Equals(2) || Session["urserrole"].Equals(5))
{

    <div class="row">
        <div class="col-md-8 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <p class="card-title">UNIT PERFORMANCE</p>


                    <button class="btn btn-primary  fs-30 font-weight-medium" id="change-chart">Change view</button>
                    <br><br>
                    <div id="chart_div" style="width: 200px; height:500px"></div>

                </div>
            </div>
        </div>
        <div class="col-md-4 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <p class="card-title">UNIT PERFORMANCE</p>

                    </div>

                    <div id="donutchartunit" style="width:100%; height:100%;"></div>

                </div>
            </div>
        </div>
    </div>


    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        google.charts.load('current', { 'packages': ['corechart', 'bar'] });
        google.charts.setOnLoadCallback(drawStuff);

        function drawStuff() {

            var button = document.getElementById('change-chart');
            var chartDiv = document.getElementById('chart_div');

            var data = google.visualization.arrayToDataTable([
                ['ACTIVITY', 'VALUES'],
                ['todos completed', @Convert.ToInt32(Session["unitcompleted"])],
                ['todos incompleted', @Convert.ToInt32(Session["Unitincompleted"]) ],
                ['tasks incompleted', @Convert.ToInt32(Session["UnitTaskcompleted"])],
                ['tasks completed', @Convert.ToInt32(Session["UnitTaskincompleted"])],

            ]);

            var materialOptions = {
                width: 900,
                chart: {
                    title: 'Unit performance',

                },
                series: {
                    0: { axis: 'VALUES' }, // Bind series 0 to an axis named 'distance'.
                    1: { axis: 'brightness' } // Bind series 1 to an axis named 'brightness'.
                },
                axes: {
                    y: {
                        distance: { label: 'numbers' }, // Left y-axis.
                        brightness: { side: 'right', label: 'numbers' } // Right y-axis.
                    }
                }
            };

            var classicOptions = {
                width: 900,
                series: {
                    0: { targetAxisIndex: 0 },
                    1: { targetAxisIndex: 1 }
                },
                title: 'Unit performance',
                vAxes: {
                    // Adds titles to each axis.
                    0: { title: 'Unit performance' },
                    1: { title: 'Unit performance' }
                }
            };

            function drawMaterialChart() {
                var materialChart = new google.charts.Bar(chartDiv);
                materialChart.draw(data, google.charts.Bar.convertOptions(materialOptions));
                button.innerText = 'Change to Classic';
                button.onclick = drawClassicChart;
            }

            function drawClassicChart() {
                var classicChart = new google.visualization.ColumnChart(chartDiv);
                classicChart.draw(data, classicOptions);
                button.innerText = 'Change to Material';
                button.onclick = drawMaterialChart;
            }

            drawMaterialChart();
        };
    </script>
    <script type="text/javascript">
                            google.charts.load("current", { packages: ["corechart"] });
                            google.charts.setOnLoadCallback(drawChart);
                            function drawChart() {
                                var data = google.visualization.arrayToDataTable([
                                    ['Activity', 'values'],
                                    ['Incomplete tasks', @Convert.ToInt32(Session["UnitTaskincompleted"])],
                                    ['complete tasks', @Convert.ToInt32(Session["UnitTaskcompleted"])],
                                    ['Incomplete todos', @Convert.ToInt32(Session["Unitincompleted"])],
                                    ['complete todos', @Convert.ToInt32(Session["Unitcompleted"])],

                                ]);

                                var options = {

                                    pieHole: 0.4,
                                    'legend': 'bottom',
                                };

                                var chart = new google.visualization.PieChart(document.getElementById('donutchartunit'));
                                chart.draw(data, options);
                            }
    </script>
}
else
{
    <div class="card text-center  mt-100">
        <div class="card-header bg-danger text-white">Notification</div>
        <div class="card-body">
            <h5 class="card-title">NOT AUTHORISED</h5>
            <p class="card-text">  access denied</p>


        </div>
        <div class="card-footer text-muted"> <a href="@Url.Action("Index", "Home")" class="btn btn-outline-primary text-black"> <i class="fa-solid fa-house-circle-check"></i></a></div>
    </div>

}